// Generated by CoffeeScript 1.9.0
var Collection, Resource, createDomain,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

Resource = require("deployd/lib/resource");

Collection = require("deployd/lib/resources/collection/");

createDomain = function(data, errors) {
  var domain, hasErrors;
  hasErrors = false;
  domain = {
    error: function(key, val) {
      errors[key] = val || true;
      hasErrors = true;
    },
    errorIf: function(condition, key, value) {
      if (condition) {
        domain.error(key, value);
      }
    },
    errorUnless: function(condition, key, value) {
      domain.errorIf(!condition, key, value);
    },
    hasErrors: function() {
      return hasErrors;
    },
    hide: function(property) {
      delete domain.data[property];
    },
    "this": data,
    data: data
  };
  return domain;
};

Collection = (function(_super) {
  __extends(Collection, _super);

  function Collection() {
    return Collection.__super__.constructor.apply(this, arguments);
  }

  return Collection;

})(Collection);

Collection.prototype.count = function(ctx, fn) {
  var collection, domain, done, errors, goOn, query;
  done = function(err, result) {
    if (err) {
      return fn(err);
    }
    if (typeof query.id === "string" && Array.isArray(result)) {
      return fn(null, result[0]);
    }
    fn(null, result);
  };
  collection = this;
  query = ctx.query || {};
  errors = {};
  domain = createDomain(query, errors);
  goOn = (function(_this) {
    return function(err, res) {
      var sanitizedQuery, store;
      if (err) {
        if (err) {
          return fn(err);
        }
      }
      store = _this.store;
      sanitizedQuery = _this.sanitizeQuery(ctx.query || {});
      return store.count(sanitizedQuery, function(err, result) {
        if (err) {
          return fn(err);
        }
        return fn(null, {
          count: result
        });
      });
    };
  })(this);
  if (collection.shouldRunEvent(collection.events.Count, ctx)) {
    collection.events.Count.run(ctx, domain, goOn);
  } else {
    goOn();
  }
};

Collection.events.push("Count");

module.exports = Collection;
